import streamlit as st

from src.app.components import (header, results, file_uploader,
                                text_area, spinner, button, info)

from src.app.constants import (LANG_PACK_TRANSLITE,
                               STATE_KEY_FILE_UPLOADER,
                               STATE_KEY_TEXT_AREA)

from src.app.session import (init,
                             get_state)

from src.model import (loadmodel_translation_ru_en,
                       interpreter,
                       loadmodel_translation_en_ru)


st.set_page_config(
    page_title="Translator Page",
    page_icon="üåè",
)


# –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
option = st.select_slider(
    '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:',
    options=['–†—É—Å—Å–∫–∏–π-–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π-–†—É—Å—Å–∫–∏–π'])


init()


# –†–∏—Å—É–µ–º —à–∞–ø–∫—É + –æ–ø–∏—Å–∞–Ω–∏–µ
header(
    LANG_PACK_TRANSLITE.get("title"),
    LANG_PACK_TRANSLITE.get("subtitle"),
    LANG_PACK_TRANSLITE.get("description"),
)

if option == '–†—É—Å—Å–∫–∏–π-–ê–Ω–≥–ª–∏–π—Å–∫–∏–π':
    with st.spinner(
            '–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π...'
    ):
        tokenizer, model = loadmodel_translation_ru_en()
elif option == '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π-–†—É—Å—Å–∫–∏–π':
    with st.spinner(
            '–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π...'
    ):
        tokenizer, model = loadmodel_translation_en_ru()


# components.info("–í –æ–±—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –Ω–∞–ø—Ä–∏–º–µ—Ä")

state = get_state()


text_area_data = text_area(
    LANG_PACK_TRANSLITE.get("text_area_label"),
    state.text_area_disabled,
    STATE_KEY_TEXT_AREA,
)


file_data = file_uploader(
    LANG_PACK_TRANSLITE.get("file_uploader_label"),
    state.file_uploader_disabled,
    STATE_KEY_FILE_UPLOADER,
)

btn = button(LANG_PACK_TRANSLITE.get("btn_start_label"))


text = text_area_data or file_data


if text and btn:
    with spinner(text=LANG_PACK_TRANSLITE.get("loading_result_text")):
        res = interpreter(text, tokenizer, model)

    results(LANG_PACK_TRANSLITE.get("result_text"), res)
elif not text and btn:
    info(LANG_PACK_TRANSLITE.get("empty_input_text"))
st.sidebar.markdown(
    """
    –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫
    –°–æ–∑–¥–∞–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö –ü—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–∞–∫—Ç–∏–∫—É–º–∞
    ¬´–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤¬ª.
    """
)
